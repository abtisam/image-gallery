{"version":3,"sources":["components/imageViewer.js","helper.js","components/imageGrid.js","App.js","serviceWorker.js","index.js"],"names":["imageViewer","props","getImageIndex","index","state","imageIndex","lightboxIsOpen","gotoPrevious","bind","gotoNext","closeLightbox","deleteImage","this","setState","console","log","storedImages","JSON","parse","localStorage","getItem","removeItem","_","remove","val","key","stringifyResult","stringify","setItem","images","backdropClosesModal","currentImage","isOpen","onClickPrev","onClickNext","onClose","rotatable","zoomable","preloadNextImage","customControls","class","onClick","size","icon","faTrash","Component","helper","file","cb","reader","FileReader","readAsDataURL","onload","result","onerror","error","url","filename","fetch","then","res","arrayBuffer","buf","File","imageGrid","fileObj","fileArray","base64Arr","enlarge","updatedImages","savedImages","uploadMultipleFiles","uploadFiles","reloadImage","imageList","map","base64String","a","Image","src","imageObj","push","table","e","preventDefault","target","files","length","i","URL","createObjectURL","getBase64","className","type","id","onChange","multiple","value","window","location","reload","onClickImage","onClickThumbnail","arr","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ff148ee.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Lightbox from 'react-images-extended';\nimport ImageGrid from './imageGrid';\nimport _ from 'lodash';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nexport class imageViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageIndex: 0,\n            lightboxIsOpen: true\n        }\n        this.gotoPrevious = this.gotoPrevious.bind(this);\n        this.gotoNext = this.gotoNext.bind(this);\n        this.closeLightbox = this.closeLightbox.bind(this);\n        this.getImageIndex = this.getImageIndex.bind(this);\n        this.deleteImage = this.deleteImage.bind(this);\n    }\n    getImageIndex = (index) => {\n        return this.state.imageIndex + index;\n    }\n\n    gotoPrevious() {\n        if (this.state.imageIndex > 0) {\n            this.setState({\n                imageIndex: this.getImageIndex(-1)\n            })\n        }\n    }\n\n    gotoNext() {\n        this.setState({\n            imageIndex: this.getImageIndex(1)\n        })\n        //..body here\n    }\n\n    closeLightbox() {\n        console.log('close')\n        //..body here\n        this.setState({\n            lightboxIsOpen: false\n        })\n\n    }\n\n    deleteImage() {\n        const imageIndex = this.props.imageIndex;\n        let storedImages = [];\n        storedImages = JSON.parse(localStorage.getItem('images'));\n        if (storedImages) {\n            localStorage.removeItem('images');\n\n            _.remove(storedImages, function (val, key) {\n                return key === imageIndex;\n            });\n\n            const stringifyResult = JSON.stringify(storedImages);\n            localStorage.setItem('images', stringifyResult);\n        }\n        this.closeLightbox();\n    }\n\n    render() {\n        // view image grid\n        if (!this.state.lightboxIsOpen) {\n            return (<ImageGrid />)\n\n        } else {\n            // view image \n            return (\n\n                <Lightbox\n                    images={this.props.images}\n                    backdropClosesModal={true}\n                    currentImage={this.state.imageIndex}\n                    isOpen={this.state.lightboxIsOpen}\n                    onClickPrev={this.gotoPrevious}\n                    onClickNext={this.gotoNext}\n                    onClose={this.closeLightbox}\n                    rotatable={true}\n                    zoomable={true}\n                    preloadNextImage={true}\n                    customControls={[\n                        \n                        <button class=\"delete-button\" key=\"deleteImage\"  onClick={this.deleteImage}>\n                        <FontAwesomeIcon size={\"4x\"} icon={faTrash} />\n                        </button>\n                    ]}\n                    //onSave={(currentImageIndex, params) => console.log('currentImageIndex, currentImageSrc, params : ', currentImageIndex, this.props.images[currentImageIndex].src, params)}\n                />\n            );\n        }\n    }\n}\n\nexport default imageViewer\n","\nexport class helper {\n    static getBase64(file, cb) {\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function () {\n            cb(reader.result)\n        };\n        reader.onerror = function (error) {\n            console.log('Error: ', error);\n        };\n    }\n\n    //return a promise that resolves with a File instance\n    static async urltoFile(url, filename) {\n        return (fetch(url)\n            .then(\n                function (res) {\n                    return res.arrayBuffer();\n                })\n            .then(\n                function (buf) {\n                    return new File([buf], filename);\n                })\n        );\n    }\n}\nexport default helper;\n\n","import React, { Component } from 'react'\nimport Gallery from 'react-grid-gallery';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport ImageViewer from './imageViewer'\nimport helper from '../helper'\nimport '../App.css'\n\nexport class imageGrid extends Component {\n\n    fileObj = [];\n    fileArray = [];\n    images = [];\n    base64Arr = []\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            enlarge: false,\n            updatedImages: [],\n            file: [null],\n            imageIndex: 0,\n            savedImages: []\n        }\n\n        this.uploadMultipleFiles = this.uploadMultipleFiles.bind(this)\n        this.uploadFiles = this.uploadFiles.bind(this)\n\n        // displayed images from localstorage if exists\n        //let storedFiles = [];\n        let storedImages = [];\n        storedImages = JSON.parse(localStorage.getItem('images'));\n        if (storedImages) {\n            this.reloadImage(storedImages);\n        }\n    }\n\n    reloadImage(imageList) {\n        imageList.map(async (base64String) => {\n            const image = new Image();\n            image.src = base64String;\n\n            const imageObj = {\n                \"src\": base64String,\n                \"thumbnail\": base64String,\n                \"thumbnailWidth\": 320,\n                \"thumbnailHeight\": 174\n            }\n            this.base64Arr.push(base64String);\n            this.setState({\n                savedImages: [...this.state.savedImages, imageObj]\n            })\n            this.images.push(imageObj)\n        });\n        console.table(this.images)\n    }\n    componentDidMount() {\n        console.log('component did mount')\n        console.table(this.state.savedImages)\n        this.setState({\n            savedImages: [...this.images]\n        })\n    }\n\n    componentWillMount() {\n        console.log('component will mount')\n    }\n\n    onClickImage() {\n        console.log('image clicked')\n    }\n    uploadFiles(e) {\n        e.preventDefault()\n        console.log(this.state.file)\n    }\n    callback() {\n        console.log('file updated !')\n    }\n    uploadMultipleFiles(e) {\n        this.fileObj.push(e.target.files)\n        console.log(`length----${this.fileObj[0].length}`)\n        for (let i = 0; i < this.fileObj[0].length; i++) {\n            let file = this.fileObj[0][i]\n            this.fileArray.push(URL.createObjectURL(file))\n\n            helper.getBase64(file, (base64String) => {\n                this.base64Arr.push(base64String);\n                const stringifyResult = JSON.stringify(this.base64Arr);\n                localStorage.setItem('images', stringifyResult);\n                //this.images = this.state.savedImages;\n\n                let imageObj = {\n                    \"src\": base64String,\n                    \"thumbnail\": base64String,\n                    \"thumbnailWidth\": 320,\n                    \"thumbnailHeight\": 174\n                }\n                //this.base64Arr.push(base64String);\n                this.images.push(imageObj)\n\n                // this.setState({\n                //    savedImages: [...this.images]\n                // })\n            });\n        }\n        console.table(this.images)\n        console.log('DONE !')\n    }\n\n    render() {\n        const onClickThumbnail = (imageIndex) => {\n            console.log('light box  clicked')\n            let arr = []\n\n            arr.push(this.images[imageIndex])\n            this.setState({\n                enlarge: true,\n                updatedImages: arr,\n                imageIndex: imageIndex\n            })\n        }\n\n        if (this.state.enlarge) {\n            return (\n                <div>\n                    <ImageViewer images={this.state.updatedImages} imageIndex={this.state.imageIndex} />\n                </div>\n            )\n        } else {\n            console.table(this.images)\n            if (this.state.savedImages.length <= 0) {\n                return (\n                    <div>\n                        <div>\n                            <form>\n                            <div className=\"form-group center\">\n                                <div>\n                                    <input type=\"file\" id=\"element1\" className=\"form-control center\" onChange={this.uploadMultipleFiles} multiple />\n\n                                    <input type='button' id=\"element2\" value='Upload' onClick={() => window.location.reload()} />\n                                </div>\n                            </div>\n                            </form >\n                        </div>\n                        <div class='center'>\n                            No Images found !\n                        </div>\n                    </div>\n                )\n            }\n            return (\n                <div>\n                    <div>\n                        <form>\n                            <div className=\"form-group center\">\n                                <div>\n                                    <input type=\"file\" id=\"element1\" className=\"form-control center\" onChange={this.uploadMultipleFiles} multiple />\n\n                                    <input type='button' id=\"element2\" value='Upload' onClick={() => window.location.reload()} />\n                                </div>\n                            </div>\n\n                        </form >\n                    </div>\n                    <div class='container'>\n                        <Gallery images={this.state.savedImages}\n                            onClickImage={this.onClickImage}\n                            onClickThumbnail={(imageIndex) => onClickThumbnail(imageIndex)}\n                        />\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default imageGrid\n","import React, { Component } from 'react'\nimport ImageGrid from './components/imageGrid'\nexport class App extends Component {\n    render() {\n        return (\n            <div>\n                <ImageGrid />\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}